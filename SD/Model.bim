{
  "name": "SemanticModel",
  "compatibilityLevel": 1600,
  "model": {
    "culture": "zh-CN",
    "dataSources": [
      {
        "type": "structured",
        "name": "Oracle/172 16 8 78/oracledb",
        "connectionDetails": {
          "protocol": "oracle",
          "address": {
            "server": "172.16.8.78/oracledb"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "hierarchicalNavigation": true
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "Oracle",
          "path": "172.16.8.78/oracledb",
          "Username": "gspm"
        }
      }
    ],
    "tables": [
      {
        "name": "D_责任体",
        "columns": [
          {
            "name": "责任体",
            "dataType": "string",
            "sourceColumn": "责任体"
          },
          {
            "name": "排序",
            "dataType": "int64",
            "sourceColumn": "排序"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wetq65mn/juezt7yYsFRJR8lQKVYnWunJjjlPe6Y/7WiDyALFjcDiT3v70MSNYeIgLUjiJnD1vSjqTcHiL5buRxM3A4s/X7PmyY6GJ7u6n+yY9bJ5BVDcHC6+qwdZ3AKhvhNZ3BIm/nT2bGRxQwOwxLOt258umQbiAz0aCwA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [责任体 = _t, 排序 = _t]),",
                "    更改的类型 = Table.TransformColumnTypes(源,{{\"责任体\", type text}, {\"排序\", Int64.Type}})",
                "in",
                "    更改的类型"
              ]
            }
          }
        ]
      },
      {
        "name": "D_施工专业",
        "columns": [
          {
            "name": "施工专业",
            "dataType": "string",
            "sourceColumn": "施工专业"
          },
          {
            "name": "排序",
            "dataType": "int64",
            "sourceColumn": "排序"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wejpn/tPdu5R0lAyVYnWilZ7N2fV8ylYg10gpNhYA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [施工专业 = _t, 排序 = _t]),",
                "    更改的类型 = Table.TransformColumnTypes(源,{{\"排序\", Int64.Type}})",
                "in",
                "    更改的类型"
              ]
            }
          }
        ]
      },
      {
        "name": "D_日历",
        "columns": [
          {
            "name": "日期",
            "dataType": "dateTime",
            "sourceColumn": "日期"
          },
          {
            "name": "日期序号",
            "dataType": "int64",
            "sourceColumn": "日期序号"
          },
          {
            "name": "年序号",
            "dataType": "int64",
            "sourceColumn": "年序号"
          },
          {
            "name": "年份名称",
            "dataType": "string",
            "sourceColumn": "年份名称"
          },
          {
            "name": "季度序号",
            "dataType": "int64",
            "sourceColumn": "季度序号"
          },
          {
            "name": "季度名称",
            "dataType": "string",
            "sourceColumn": "季度名称"
          },
          {
            "name": "月份序号",
            "dataType": "int64",
            "sourceColumn": "月份序号"
          },
          {
            "name": "月份名称",
            "dataType": "string",
            "sourceColumn": "月份名称"
          },
          {
            "name": "周序号",
            "dataType": "int64",
            "sourceColumn": "周序号"
          },
          {
            "name": "周名称",
            "dataType": "string",
            "sourceColumn": "周名称"
          },
          {
            "name": "年季序号",
            "dataType": "int64",
            "sourceColumn": "年季序号"
          },
          {
            "name": "年季名称",
            "dataType": "string",
            "sourceColumn": "年季名称"
          },
          {
            "name": "年月序号",
            "dataType": "int64",
            "sourceColumn": "年月序号"
          },
          {
            "name": "年月名称",
            "dataType": "string",
            "sourceColumn": "年月名称"
          },
          {
            "name": "年周序号",
            "dataType": "int64",
            "sourceColumn": "年周序号"
          },
          {
            "name": "年周名称",
            "dataType": "string",
            "sourceColumn": "年周名称"
          },
          {
            "name": "日序号",
            "dataType": "int64",
            "sourceColumn": "日序号"
          },
          {
            "name": "周天名称",
            "dataType": "string",
            "sourceColumn": "周天名称"
          },
          {
            "name": "工作日",
            "dataType": "string",
            "sourceColumn": "工作日"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    x = 2000,",
                "    y = Date.Year(DateTime.FixedLocalNow()),",
                "    begin_date = if x = null then #date(Date.Year(DateTime.LocalNow()),1,1) else #date(x,1,1),",
                "    end_date = if y = null then #date(Date.Year(DateTime.LocalNow()),12,31) else #date(y,12,31),",
                "    list = {1..Number.From(end_date)-Number.From(begin_date)+1},",
                "    dates = List.Transform( list , (item)=> Date.AddDays(begin_date,item-1) ),",
                "    table = Table.TransformColumnTypes(Table.RenameColumns(Table.FromList(dates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),{{\"Column1\", \"日期\"}}),{{\"日期\", type date}}),",
                "    date_id = Table.TransformColumnTypes(Table.AddColumn(table, \"日期序号\", each Date.Year([日期])*10000+Date.Month([日期])*100+Date.Day([日期])),{{\"日期序号\", Int64.Type}}),",
                "    year_id = Table.AddColumn(date_id, \"年序号\", each Date.Year([日期]), Int64.Type),",
                "    year_name = Table.AddColumn(year_id, \"年份名称\", each Text.From([年序号])&\"年\",Text.Type),",
                "    quarter_id = Table.AddColumn(year_name, \"季度序号\", each Date.QuarterOfYear([日期]), Int64.Type),",
                "    quarter_name = Table.AddColumn(quarter_id, \"季度名称\", each Text.From([季度序号])&\"季\",Text.Type),",
                "    month_id = Table.AddColumn(quarter_name, \"月份序号\", each Date.Month([日期]), Int64.Type),",
                "    month_name = Table.AddColumn(month_id, \"月份名称\", each Text.PadStart(Text.From([月份序号]),2,\"0\")&\"月\",Text.Type),",
                "    week_id = Table.AddColumn(month_name, \"周序号\", each Date.WeekOfYear([日期]), Int64.Type),",
                "    week_name = Table.AddColumn(week_id, \"周名称\", each Text.PadStart(Text.From([周序号]),2,\"0\")&\"周\",Text.Type),",
                "    year_quarter_id = Table.AddColumn(week_name, \"年季序号\", each Date.Year([日期])*10+Date.QuarterOfYear([日期]), Int64.Type),",
                "    year_quarter_name = Table.AddColumn(year_quarter_id, \"年季名称\", each \"YQ\"&Text.From([年季序号]),Text.Type),",
                "    year_month_id = Table.AddColumn(year_quarter_name, \"年月序号\", each Date.Year([日期])*100+ Date.Month([日期]), Int64.Type),",
                "    year_month_name = Table.AddColumn(year_month_id, \"年月名称\", each [年份名称]&[月份名称],type text),",
                "    year_week_id = Table.AddColumn(year_month_name, \"年周序号\", each Date.Year([日期])*100+ Date.WeekOfYear([日期]), Int64.Type),",
                "    #\"year_week-name\" = Table.AddColumn(year_week_id, \"年周名称\", each \"YW\"&Text.From([年周序号]),Text.Type),",
                "    day_in_week_id = Table.AddColumn(#\"year_week-name\", \"日序号\", each Date.DayOfWeek([日期],0), Int64.Type),",
                "    day_in_week_name = Table.AddColumn(day_in_week_id, \"周天名称\", each if [日序号] = 1 then \"WD1\" else",
                "if [日序号] = 2 then \"WD2\" else",
                "if [日序号] = 3 then \"WD3\" else",
                "if [日序号] = 4 then \"WD4\" else",
                "if [日序号] = 5 then \"WD5\" else",
                "if [日序号] = 6 then \"WD6\" else",
                "\"WD7\",Text.Type),",
                "    work_day = Table.AddColumn(day_in_week_name , \"工作日\", each if [日序号] = 6 or [日序号] = 0 then \"休息日\" else \"工作日\",Text.Type)",
                "in",
                "    work_day"
              ]
            }
          }
        ]
      },
      {
        "name": "D_项目信息",
        "columns": [
          {
            "name": "项目编码",
            "dataType": "string",
            "sourceColumn": "项目编码"
          },
          {
            "name": "项目名称",
            "dataType": "string",
            "sourceColumn": "项目名称"
          },
          {
            "name": "专业分类",
            "dataType": "string",
            "sourceColumn": "专业分类"
          },
          {
            "name": "签约单位",
            "dataType": "string",
            "sourceColumn": "签约单位"
          },
          {
            "name": "经营类型",
            "dataType": "string",
            "sourceColumn": "经营类型"
          },
          {
            "name": "业务板块",
            "dataType": "string",
            "sourceColumn": "业务板块"
          },
          {
            "name": "投标管理部门",
            "dataType": "string",
            "sourceColumn": "投标管理部门"
          },
          {
            "name": "股份财务一体化项目编码",
            "dataType": "string",
            "sourceColumn": "股份财务一体化项目编码"
          },
          {
            "name": "股份一体化利润中心编码",
            "dataType": "string",
            "sourceColumn": "股份一体化利润中心编码"
          },
          {
            "name": "责任体",
            "dataType": "string",
            "sourceColumn": "责任体"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = MD_XIANGMUXINXI,",
                "    计算责任体 = Table.AddColumn(源, \"责任体\", each if [京内外分布] = \"国际\" then \"海外\" else if [厂房事业部] <> null then [厂房事业部] else if [直管机构] <> \"公司\" then [直管机构] else if [城市公司] <> null then [城市公司] else \"公司直营\", type text),",
                "    重命名的列1 = Table.RenameColumns(计算责任体,{{\"fYWBK\", \"业务板块\"}}),",
                "    删除的其他列 = Table.SelectColumns(重命名的列1,{\"项目编码\", \"项目名称\", \"专业分类\", \"签约单位\", \"经营类型\", \"业务板块\", \"投标管理部门\", \"股份财务一体化项目编码\", \"股份一体化利润中心编码\", \"责任体\"})",
                "in",
                "    删除的其他列"
              ]
            }
          }
        ]
      },
      {
        "name": "D_分包类型",
        "columns": [
          {
            "name": "分包类型",
            "dataType": "string",
            "sourceColumn": "分包类型"
          },
          {
            "name": "简称",
            "dataType": "string",
            "sourceColumn": "简称"
          },
          {
            "name": "排序",
            "dataType": "int64",
            "sourceColumn": "排序"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WetG+6tm0vUo6CIahUqxOtNKznvan62Y97Wh72tMKFIRwgQwjpdhYAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [分包类型 = _t, 简称 = _t, 排序 = _t]),",
                "    更改的类型 = Table.TransformColumnTypes(源,{{\"排序\", Int64.Type}})",
                "in",
                "    更改的类型"
              ]
            }
          }
        ]
      },
      {
        "name": "D_商务科目",
        "columns": [
          {
            "name": "FID",
            "dataType": "string",
            "sourceColumn": "FID"
          },
          {
            "name": "商务科目名称",
            "dataType": "string",
            "sourceColumn": "商务科目名称"
          },
          {
            "name": "状态",
            "dataType": "string",
            "sourceColumn": "状态"
          },
          {
            "name": "全路径",
            "dataType": "string",
            "sourceColumn": "全路径"
          },
          {
            "name": "一级",
            "dataType": "string",
            "sourceColumn": "一级"
          },
          {
            "name": "二级",
            "dataType": "string",
            "sourceColumn": "二级"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = 商务科目",
                "in",
                "    源"
              ]
            }
          }
        ]
      },
      {
        "name": "D_标准合同",
        "columns": [
          {
            "name": "标准合同编号",
            "dataType": "string",
            "sourceColumn": "标准合同编号"
          },
          {
            "name": "标准合同名称",
            "dataType": "string",
            "sourceColumn": "标准合同名称"
          },
          {
            "name": "合同分类",
            "dataType": "string",
            "sourceColumn": "合同分类"
          },
          {
            "name": "商务科目ID",
            "dataType": "string",
            "sourceColumn": "商务科目ID"
          },
          {
            "name": "财务科目ID",
            "dataType": "string",
            "sourceColumn": "财务科目ID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    源 = #\"Oracle/172 16 8 78/oracledb\",",
                "    GSPM = 源{[Schema=\"GSPM\"]}[Data],",
                "    GSPM_BIAOZHUNHETONG = GSPM{[Name=\"GSPM_BIAOZHUNHETONG\"]}[Data],",
                "    重命名的列 = Table.RenameColumns(GSPM_BIAOZHUNHETONG,#\"fx_List_生成字段更名列表\"(\"GSPM\",\"GSPM_BIAOZHUNHETONG\")),",
                "    删除的其他列 = Table.SelectColumns(重命名的列,{\"标准合同编号\", \"标准合同名称\", \"合同分类\", \"商务科目ID\", \"财务科目ID\"}),",
                "    删除的副本 = Table.Distinct(删除的其他列, {\"标准合同编号\"}),",
                "    筛选的行 = Table.SelectRows(删除的副本, each [标准合同编号] <> null and [标准合同编号] <> \"\")",
                "in",
                "    筛选的行"
              ]
            }
          }
        ]
      }
    ],
    "expressions": [
      {
        "name": "MD_XIANGMUXINXI",
        "kind": "m",
        "expression": [
          "let",
          "    源 = #\"Oracle/172 16 8 78/oracledb\",",
          "    MD = 源{[Schema=\"MD\"]}[Data],",
          "    MD_XIANGMUXINXI = MD{[Name=\"MD_XIANGMUXINXI\"]}[Data],",
          "    重命名的列 = Table.RenameColumns(MD_XIANGMUXINXI,fx_List_生成字段更名列表(\"MD\",\"MD_XIANGMUXINXI\")),",
          "    #\"停止折叠（取消后续会出错）\" = Table.StopFolding(重命名的列)",
          "in",
          "    #\"停止折叠（取消后续会出错）\""
        ]
      },
      {
        "name": "fx_List_生成字段更名列表",
        "kind": "m",
        "expression": [
          "let",
          "    源 = (OWNER as text,TABLE_NAME as text) as list => let",
          "        源 =   #\"Oracle/172 16 8 78/oracledb\",",
          "        源1=Value.NativeQuery(源,\"select COLUMN_NAME,COMMENTS from all_col_comments where OWNER = '\" & OWNER &\"' and TABLE_NAME = '\" & TABLE_NAME & \"'\"),",
          "        替换的值 = Table.ReplaceValue(源1,null, each [COLUMN_NAME],Replacer.ReplaceValue,{\"COMMENTS\"}),",
          "        更改的类型 = Table.TransformColumnTypes(替换的值,{{\"COMMENTS\", type text}}),",
          "        删除的副本 = Table.Distinct(更改的类型, {\"COMMENTS\"}),",
          "        缩短说明字段长度=Table.TransformColumns(删除的副本, {{\"COMMENTS\", each Text.Start(_,15), type text}}),",
          "        自定义1 = List.Zip({缩短说明字段长度[COLUMN_NAME],缩短说明字段长度[COMMENTS]})",
          "    in",
          "        自定义1",
          "in",
          "    源"
        ]
      },
      {
        "name": "MD_SHANGWUKEMU2020",
        "kind": "m",
        "expression": [
          "let",
          "    源 = #\"Oracle/172 16 8 78/oracledb\",",
          "    MD = 源{[Schema=\"MD\"]}[Data],",
          "    MD_SHANGWUKEMU2020 = MD{[Name=\"MD_SHANGWUKEMU2020\"]}[Data]",
          "in",
          "    MD_SHANGWUKEMU2020"
        ]
      },
      {
        "name": "商务科目",
        "kind": "m",
        "expression": [
          "let",
          "    源 = MD_SHANGWUKEMU2020,",
          "    删除的其他列 = Table.SelectColumns(源,{\"FID\", \"FSHANGWUKEMUMC\", \"FSHIYONGZHUANGTAI\", \"FFULLNAME\"}),",
          "    重命名的列 = Table.RenameColumns(删除的其他列,{{\"FSHANGWUKEMUMC\", \"商务科目名称\"}, {\"FSHIYONGZHUANGTAI\", \"状态\"}, {\"FFULLNAME\", \"全路径\"}}),",
          "    复制的列 = Table.DuplicateColumn(重命名的列, \"全路径\", \"全路径 - 复制\"),",
          "    按分隔符拆分列 = Table.SplitColumn(复制的列, \"全路径 - 复制\", Splitter.SplitTextByDelimiter(\"/\", QuoteStyle.Csv), {\"全路径 - 复制.1\", \"一级\", \"二级\"}),",
          "    删除的列 = Table.RemoveColumns(按分隔符拆分列,{\"全路径 - 复制.1\"}),",
          "    替换的值 = Table.ReplaceValue(删除的列,null,each [一级],Replacer.ReplaceValue,{\"二级\"})",
          "in",
          "    替换的值"
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "700"
      }
    ]
  },
  "id": "SemanticModel"
}